require('dotenv').config();
import express from "express";
import { readdirSync } from "fs";
//const { readdirSync } = require("fs")
import cors from "cors";
import morgan from "morgan";
import cookieParser from "cookie-parser";
import authRoutes from "./routes/auth";
import authDoctor from "./routes/authDoctor";
import hospitals from "./routes/hospitals"
import clinic from "./routes/clinic"
import specialization from "./routes/specialization"
import authCustomerService from "./routes/authCustomerService";
import schedule from "./routes/schedule";
import province from "./routes/province";
import city from "./routes/city";
import appointment from "./routes/appointment";
const { runEveryMidnightScheduleDelete, runEveryMidnightAppointment, runEveryMidnightAppointmentReminder, dbConnection, errorHandler } = require("./helpers");
const logger = require("./helpers/logger");

import moment from "moment"
const path = require('path')
const app = express();


dbConnection();

//logger(app);
// middleware
app.use(cors());
app.use(morgan("dev"));
app.use(express.json());
app.use(cookieParser());
app.use(express.static("public"));
app.use(express.urlencoded({ extended: true }));


//cron jobs
runEveryMidnightScheduleDelete()
runEveryMidnightAppointment()


// route middleware
//readdirSync("./routes").map((r) => app.use("/api", require(`./routes/${r}`)));

app.use("/api/auth", authRoutes);
app.use("/api/doctor", authDoctor);
app.use('/uploads', express.static(path.join(__dirname, 'uploads')))
app.use("/api/hospital", hospitals)
app.use("/api/clinic", clinic)
app.use("/api/specialization", specialization)
app.use("/api/customerservice", authCustomerService);
app.use("/api/schedule", schedule);
app.use("/api/province", province);
app.use("/api/city", city);
app.use("/api/appointment", appointment);

/* 
app.use(function (req, res, next) {
    res.status(404)
    res.send("404 :File not found")
}) */

// Error handling middleware
app.use(function (err, req, res, next) {
    return res.status(500).json({
        error: errorHandler(err) || "Something went wrong!"
    });
});


//the port is gonna be generated by heroku when we deploy , for now we use 5000
const port = process.env.PORT || 5000;
app.listen(port, () => console.log(`Listening on port ${port}`));